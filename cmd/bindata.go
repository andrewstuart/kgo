// Code generated by go-bindata.
// sources:
// templates/Dockerfile
// templates/Makefile
// templates/config.go
// templates/k8s.yaml
// templates/main.go
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x48\xcf\xcf\x49\xcc\x4b\xb7\xca\xcf\x4b\x2a\xcd\xcc\x49\xe1\x02\x04\x00\x00\xff\xff\xa0\x4d\x60\x6e\x14\x00\x00\x00")

func templatesDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerfile,
		"templates/Dockerfile",
	)
}

func templatesDockerfile() (*asset, error) {
	bytes, err := templatesDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Dockerfile", size: 20, mode: os.FileMode(420), modTime: time.Unix(1541561220, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x51\x6b\xf2\x30\x14\x86\xaf\x3d\xbf\xe2\x20\xb9\x48\xe0\x6b\xfc\x76\x37\x84\x5e\x04\xed\x54\x86\xda\x55\xef\x67\x6c\xa3\x16\xd3\x26\x98\x08\x93\x92\xff\x3e\x8c\xae\xdb\x55\xcb\xfb\x90\xe7\xbc\xbc\x22\xcf\xd3\xae\x43\xbe\x92\x8d\xc2\x10\x60\xb1\x14\xb3\x2c\x26\x8b\x46\x1e\x63\x34\x5d\x4f\xde\xb3\xe2\xb3\x58\xaf\xb7\x11\x4c\x4d\x79\x56\x97\xc2\x18\x7f\xa7\x2b\xb1\xcc\x36\xb9\x98\x64\xbd\xc6\x59\x59\xc6\x87\xf0\xf6\xb1\x15\xb3\x94\xd0\x3f\x06\x36\x22\x34\xde\x60\x00\x9b\xb9\x48\x09\x75\x27\xa5\x35\x56\x51\x8a\x75\xeb\xac\x2a\x3d\x26\xc9\xc1\x5c\x1a\xe9\x71\xd8\x75\xbb\xae\xc3\xba\xad\xd4\x17\xf2\x42\x59\x33\xad\x8f\xca\x79\x87\xff\x31\x84\x5d\x08\x43\x24\xf4\x85\x31\x00\xaf\x9c\x1f\xc3\xe0\x68\xf0\xfe\x87\x7c\xc4\x39\x07\x78\x78\xc7\x31\x83\xc1\xf3\xca\xfe\x5a\xeb\x0a\x13\x8f\x84\xc6\x8a\x0c\x39\xf6\xd0\x5e\xdd\xa9\x07\x00\x95\xb2\xda\xdc\xc6\xcf\x82\x30\x38\x5f\xf7\xaa\xf4\x1a\xa5\xb5\xfa\x86\xc9\x01\xcf\xaf\x8e\xdf\x64\xa3\x7f\x51\x92\xb4\xfd\x0c\x84\xf6\x03\x31\x74\xca\x63\x1d\x67\x7d\x58\x1b\xd5\xfa\x11\xa1\x22\xcf\x19\x3e\x3e\x29\xa1\xa5\xd4\x1a\x37\x73\xf1\xef\xa7\x03\x83\xef\x00\x00\x00\xff\xff\x0d\x5a\x42\xe7\xa5\x01\x00\x00")

func templatesMakefileBytes() ([]byte, error) {
	return bindataRead(
		_templatesMakefile,
		"templates/Makefile",
	)
}

func templatesMakefile() (*asset, error) {
	bytes, err := templatesMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Makefile", size: 421, mode: os.FileMode(420), modTime: time.Unix(1541574082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConfigGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xc1\x6a\xdc\x30\x10\x3d\x5b\x5f\x31\x15\x3d\xc8\x50\x64\x4a\x6f\x2d\x7b\x08\xc1\xd0\x52\x9a\x84\xe4\xb0\xc7\xa0\xca\x63\x59\xd4\x96\xc4\x58\x72\x1b\xb6\xfe\xf7\x22\xdb\x1b\x76\x97\xed\x21\x37\xf1\xde\x9b\x37\xcf\x6f\x1c\x94\xfe\xa5\x0c\xc2\xa0\xac\x63\xcc\x0e\xc1\x53\x04\xc1\x0a\x3e\x46\xb2\xce\x8c\x9c\xb1\x82\x1b\x1b\xbb\xf4\x53\x6a\x3f\x54\xed\xe8\x7c\xb4\xed\xcb\xeb\x83\x9f\xf3\xa3\xa5\x14\x46\x74\x55\xef\x0d\xa5\xf1\x92\x0d\xed\xc7\x4f\xd5\x64\x03\x12\x67\x25\x63\x93\xa2\xbc\x4c\xb7\x06\x76\xb0\xc0\xf2\x0e\x7f\x8b\x92\x15\xbd\x01\xd8\xc1\x6a\xb2\x61\x25\x63\x6d\x72\x1a\x46\x8c\x29\xdc\x7a\xd7\x5a\x23\x4a\x38\x2c\xe3\xf2\xa6\x69\x56\xe8\x41\xc5\x4e\x70\xc9\xcb\xab\xf8\xfb\xaf\xf7\x3f\xea\xea\x70\x00\x79\xa7\x06\x84\x79\xfe\x8f\xae\xc2\xa8\x2f\x64\xab\xee\x09\xe3\xaa\xcb\x84\xe0\x57\x9c\x9e\x30\xd6\x6e\x7a\x20\x6c\xed\x9f\x13\xc1\x5f\x48\x21\x20\x9d\x7a\xdd\xa4\xe8\x07\x15\xad\xae\xdd\x24\xce\xa6\xbf\xe3\xcb\x23\x86\x5e\x69\x24\xb1\x1d\x22\x97\xf0\x8a\x71\xc9\x3f\x00\x7f\xe6\x65\xb6\xb2\x2d\x20\x11\x7c\xde\x41\x36\x78\x44\xd5\x7c\x73\xc7\x7a\xbe\x2c\xd4\xbb\x1d\x38\xdb\xe7\xaa\x8a\xde\xc8\xbd\x8d\x5d\x4d\xe4\x49\x20\x51\x29\xd7\x27\xd7\x3e\xf5\x0d\x38\x1f\x81\x50\x35\x60\x9d\x8d\x56\xf5\xa0\x17\xa3\xfc\x6d\xf3\x96\xfa\x7e\x33\xbf\xed\x94\x33\x28\xf2\x49\xc4\x33\x1c\x7f\x07\x59\x4f\xe8\xe2\x72\x96\xb7\x05\xbb\x92\x6c\xaf\xc8\x9d\x07\xeb\xbd\x6a\x4e\x22\x15\x33\x2b\xe6\x5c\x81\xf1\xcb\x8a\xbd\x8a\xba\x3b\x6e\x60\x33\xfb\x17\x00\x00\xff\xff\x1b\x8f\x84\x25\xdd\x02\x00\x00")

func templatesConfigGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigGo,
		"templates/config.go",
	)
}

func templatesConfigGo() (*asset, error) {
	bytes, err := templatesConfigGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config.go", size: 733, mode: os.FileMode(420), modTime: time.Unix(1544858246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesK8sYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xbb\x6e\xf3\x30\x0c\x85\x77\x3f\x05\x5f\xc0\x7f\xec\x7f\x0a\xb4\x15\xc8\xd2\xa1\x45\xd0\x02\xdd\x19\xe5\x20\x10\xa2\x5b\x25\x3a\xad\x11\xf8\xdd\x0b\xe5\xe2\x2a\x4d\xc7\x72\x12\xcf\x67\x92\xc7\x38\x1c\xcd\x1b\x52\x36\xc1\x2b\xc2\xa7\xc0\x97\x67\x5e\x1c\xfa\x0d\x84\xfb\x66\x6f\xfc\x56\xd1\x0a\xd1\x86\xd1\xc1\x4b\xe3\x20\xbc\x65\x61\xd5\x10\x79\x76\x50\x74\x3c\xd2\xbf\x67\x76\xa0\x69\xba\x68\x39\xb2\xae\xc0\xa9\x2d\x34\x47\xe8\x32\x97\x10\xad\xd1\x9c\x15\xf5\x0d\x91\xc0\x45\xcb\x82\x42\x88\xea\xfd\xa5\x2c\x6f\x60\xf3\xb5\x23\xe2\x18\x7f\x9e\x24\xba\x2e\x2e\xa5\x83\x17\x36\x1e\x69\x1e\x6a\x7f\x35\x7a\x2e\xe3\x78\x77\x41\xab\xa0\xf7\x48\x2f\x21\x08\x4d\xd3\xa2\x28\x8f\x05\xde\x7d\xbd\x1e\xac\x5d\x07\x6b\xf4\xa8\xe8\xc1\x7e\xf0\x98\x67\x9e\x90\xc3\x90\x34\x2a\xbf\x45\x7c\x1f\x90\xe5\x46\x23\xd2\x71\x50\xd4\x77\x9d\xbb\x51\x1d\x5c\x48\xa3\xa2\xff\x5d\xf7\x64\x66\x12\x43\xaa\xc7\xdb\xef\x7f\x5c\x87\x24\x8a\x96\xdd\xb2\x6b\xda\xb6\x6d\xea\x30\x0f\xd7\xf0\x5e\x91\x0e\x46\xe3\x4f\x92\x9b\x9d\xb4\xa7\x67\x39\x7d\xb2\x25\x9c\x76\x90\xca\x0d\x51\x86\x85\x96\x90\xce\xbe\xef\x62\xfb\x0a\x00\x00\xff\xff\xf3\x46\xe3\x63\x78\x02\x00\x00")

func templatesK8sYamlBytes() ([]byte, error) {
	return bindataRead(
		_templatesK8sYaml,
		"templates/k8s.yaml",
	)
}

func templatesK8sYaml() (*asset, error) {
	bytes, err := templatesK8sYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/k8s.yaml", size: 632, mode: os.FileMode(420), modTime: time.Unix(1541562291, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\x2b\xcd\x4b\x06\x33\x35\x34\x15\xaa\xb9\x38\x8b\x53\x4b\x4a\x0b\x9c\xf3\xf3\xd2\x32\xd3\x35\x34\xb9\x38\x73\xd2\xf5\x3c\xf3\xd2\xf2\x35\x94\x8a\x4b\x12\x8b\x4a\x52\x53\x94\x34\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\x41\xf2\x92\x6a\x41\x00\x00\x00")

func templatesMainGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGo,
		"templates/main.go",
	)
}

func templatesMainGo() (*asset, error) {
	bytes, err := templatesMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go", size: 65, mode: os.FileMode(420), modTime: time.Unix(1542917020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Dockerfile": templatesDockerfile,
	"templates/Makefile": templatesMakefile,
	"templates/config.go": templatesConfigGo,
	"templates/k8s.yaml": templatesK8sYaml,
	"templates/main.go": templatesMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{templatesDockerfile, map[string]*bintree{}},
		"Makefile": &bintree{templatesMakefile, map[string]*bintree{}},
		"config.go": &bintree{templatesConfigGo, map[string]*bintree{}},
		"k8s.yaml": &bintree{templatesK8sYaml, map[string]*bintree{}},
		"main.go": &bintree{templatesMainGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

