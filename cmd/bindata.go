// Code generated by go-bindata.
// sources:
// templates/.envrc
// templates/.gitignore
// templates/Dockerfile
// templates/Makefile
// templates/config.go
// templates/k8s.yaml
// templates/main.go
// templates/runner.conf
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnvrc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf7\x37\x34\x34\xf4\xf5\x77\x09\xf5\x71\xb5\xcd\xcf\xe3\x02\x04\x00\x00\xff\xff\x23\xba\x3e\x29\x0f\x00\x00\x00")

func templatesEnvrcBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnvrc,
		"templates/.envrc",
	)
}

func templatesEnvrc() (*asset, error) {
	bytes, err := templatesEnvrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.envrc", size: 15, mode: os.FileMode(420), modTime: time.Unix(1564034532, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\x28\xe0\x2a\xc9\x2d\xe0\x02\x04\x00\x00\xff\xff\x57\x45\x21\xbf\x08\x00\x00\x00")

func templatesGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_templatesGitignore,
		"templates/.gitignore",
	)
}

func templatesGitignore() (*asset, error) {
	bytes, err := templatesGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.gitignore", size: 8, mode: os.FileMode(420), modTime: time.Unix(1551887816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x48\xcf\xcf\x49\xcc\x4b\xb7\x4a\xcc\x29\xc8\xcc\x4b\xe5\x72\xf5\x0b\x09\x8a\x0c\xf0\xf7\xf4\x0b\x51\xd0\x4f\x2c\x28\xe0\x0a\xf7\x0f\xf2\x76\xf1\x0c\x52\xd0\x4f\xcf\xd7\x2f\x2e\x4a\x06\x8b\x71\x39\xba\xb8\x28\x24\x16\x14\x28\xe8\x73\x01\x02\x00\x00\xff\xff\xcd\x75\x7e\xe4\x42\x00\x00\x00")

func templatesDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerfile,
		"templates/Dockerfile",
	)
}

func templatesDockerfile() (*asset, error) {
	bytes, err := templatesDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Dockerfile", size: 66, mode: os.FileMode(420), modTime: time.Unix(1636764845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\xc1\x8e\x9b\x30\x10\x86\xcf\xcc\x53\x8c\x56\x3e\xd8\x52\x71\xb6\xb7\x0a\x89\x83\x1b\x28\xbb\x6a\x37\x50\xd8\x7b\x42\xc0\x21\x28\x06\xa3\xd8\x48\x89\x10\xef\x5e\xc5\xa1\xb4\x27\xd0\x7c\xf6\x37\xff\x8c\x45\x96\x85\xd3\x84\x7c\x57\x76\x12\xe7\x19\xde\x3f\x44\x12\xbb\xca\x7b\x57\x36\xae\x14\xa5\xdb\x9f\x71\xbe\xcf\xd3\xf4\xd3\x81\x48\x57\x17\x79\xcd\xb5\xb6\x0f\xba\x13\x1f\x71\x91\x89\x6d\xbc\x6a\xcc\x50\x56\xee\x22\xfc\xf8\xfd\x29\x92\x90\xd0\xff\x0c\x6c\x43\xa8\xeb\xc1\x00\x8a\x37\x11\x12\x6a\xce\x52\x29\xac\x9d\x14\xdb\xde\x0c\xb2\xb2\xe8\xfb\x27\x7d\xed\x4a\x8b\x2f\xd3\x74\x98\x26\x6c\xfb\x5a\xde\x90\xe7\x72\xd0\x51\xdb\x48\x63\x0d\xbe\xe2\x3c\x1f\xe6\xf9\x05\x09\xfd\xca\x18\x80\x95\xc6\x06\xe0\x35\x1a\x1f\x7f\xc8\x37\x9c\x73\x80\x46\x07\xe0\x6d\x93\x74\x1f\xef\xc4\xf7\x5f\x71\x14\xbe\x62\x92\xa6\x45\xa8\xda\x7e\xbc\x61\xa3\xf1\x38\xb6\xaa\x46\x5f\x63\x39\x0c\x00\xcf\x18\x01\x2e\x16\xf0\x96\x5c\xcb\x29\x8b\x84\xba\xa1\x18\x72\x5c\xe1\x30\x9a\xf3\x0a\x00\x6a\x39\x28\x7d\x0f\x96\x91\xc0\xbb\x8c\x47\x59\x59\xf5\x68\xa0\xee\xe8\x9f\xf0\xf2\xcd\xf0\x7b\xd9\xa9\x7f\xc8\xf7\xfb\x75\x71\x84\xae\x2b\x65\x68\xa4\xc5\xd6\x3d\xc4\xd3\xda\xc9\xde\x6e\x08\x15\x59\xc6\xf0\xf9\x09\x09\xad\x4a\xa5\xb0\x78\x13\x5f\xfe\x66\x60\xf0\x27\x00\x00\xff\xff\x51\xf2\x28\x5d\xd7\x01\x00\x00")

func templatesMakefileBytes() ([]byte, error) {
	return bindataRead(
		_templatesMakefile,
		"templates/Makefile",
	)
}

func templatesMakefile() (*asset, error) {
	bytes, err := templatesMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Makefile", size: 471, mode: os.FileMode(420), modTime: time.Unix(1636764852, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConfigGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xcd\x6a\xdc\x30\x10\x3e\x5b\x4f\x31\x15\x3d\xc8\xa5\x68\x29\xbd\xb5\xec\x21\x04\x43\x4b\x69\x12\x12\xe8\x1e\x83\x2a\x8f\x65\x51\x5b\x32\xe3\x91\xdb\xb0\xf5\xbb\x17\xd9\xbb\x61\x37\x6c\x0f\xb9\x18\x31\xdf\xcf\x7c\x33\xe3\xc1\xd8\x5f\xc6\x21\xf4\xc6\x07\x21\x7c\x3f\x44\x62\x50\xa2\x90\x23\x93\x0f\x6e\x94\x42\x14\xd2\x79\x6e\xd3\x4f\x6d\x63\xbf\x69\xc6\x10\xd9\x37\x4f\xcf\x0f\x79\x8e\x8f\x9e\xd2\x30\x62\xd8\x74\xd1\x51\x1a\x5f\xa2\x43\xf3\xe1\xe3\x66\xf2\x03\x92\x14\xa5\x10\x93\xa1\xdc\xac\x73\xb0\x85\x55\xa0\x6f\xf0\xb7\x2a\x33\xd6\xa4\x60\x61\x44\x4e\xc3\x75\x0c\x8d\x77\xaa\x84\x77\x8b\x52\xff\xc8\x5f\xd8\x8b\xc2\x36\x0e\x3e\x6d\x61\xad\xae\xc2\x5c\xd3\x57\x75\xbd\x6a\xee\x0c\xb7\x4a\x6a\x79\xb9\xfe\xf6\xcb\xed\xf7\x6a\xb3\xdf\x83\xbe\x31\x3d\xc2\x3c\xff\x87\xb7\x41\xb6\x2f\x68\x2b\xef\x01\x79\xe5\x65\x40\xc9\x0b\x4e\x0f\xc8\x55\x98\xee\x08\x1b\xff\xe7\x84\xf0\x17\xd2\x90\x67\x38\xf1\xba\x4a\x1c\x7b\xc3\xde\x56\x61\x52\x67\xea\x6f\xf8\x74\x8f\x43\x67\x2c\x92\x3a\x5c\x25\x0f\xfb\x5c\x93\x5a\xbe\x07\xf9\x28\xcb\x6c\xe5\x1b\x40\xa2\xbc\x95\x6c\x70\x8f\xa6\xfe\x1a\x8e\xfb\xfb\xbc\x40\x6f\xb6\x10\x7c\x97\xd7\x57\x74\x4e\xef\x3c\xb7\x15\x51\x24\x85\x44\xa5\x5e\x9f\xd2\xc6\xd4\xd5\x10\x22\x03\xa1\xa9\xc1\x07\xcf\xde\x74\x60\x17\xa3\x3c\xdb\x7c\x48\x7d\x7b\x30\xbf\x6e\x4d\x70\xa8\xf2\xcd\xd4\x23\x1c\xff\x0d\x5d\x4d\x18\xb8\x5c\x7a\xbd\x2a\xd8\x85\x64\x3b\x43\xe1\x3c\x58\x17\x4d\x7d\x12\xa9\x98\x45\x31\xe7\x15\xb8\xb8\xb4\xd8\x19\xb6\xed\xb1\x83\x10\x05\x21\x27\x0a\x19\x12\xb3\xf8\x17\x00\x00\xff\xff\x06\xd1\xf5\xdd\xf7\x02\x00\x00")

func templatesConfigGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigGo,
		"templates/config.go",
	)
}

func templatesConfigGo() (*asset, error) {
	bytes, err := templatesConfigGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config.go", size: 759, mode: os.FileMode(420), modTime: time.Unix(1551245405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesK8sYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x8b\xdb\x30\x10\xbd\xfb\x57\x0c\xa1\x0b\xed\xc1\x8e\xd3\xd3\x22\xe8\xa1\xb0\x97\x85\x36\x84\x16\x7a\x9f\xc8\x93\x44\x44\x5f\x95\xc6\xdb\x06\xe3\xff\x5e\x26\xb1\x5d\x27\xbb\x7b\x8b\x4e\xd2\xbc\x99\xd1\xd3\xbc\x27\x8c\xe6\x17\xa5\x6c\x82\x57\x80\x31\xe6\xe5\xcb\xaa\x38\x1a\xdf\x28\x78\xa2\x68\xc3\xc9\x91\xe7\xc2\x11\x63\x83\x8c\xaa\x00\xf0\xe8\x48\x41\xd7\x41\xb5\x46\x47\xd0\xf7\x43\x2c\x47\xd4\x33\xe0\x7c\x14\x34\x47\xd2\x52\x97\x28\x5a\xa3\x31\x2b\x58\x15\x00\x99\x2c\x69\x0e\x49\x10\x00\x87\xac\x0f\xdf\x70\x4b\x36\x5f\x02\x20\x5c\x6e\x6f\x61\x72\xd1\x22\xd3\x50\x33\xe3\x24\xcb\x5e\x95\xbf\xd9\x00\x60\x24\x23\x4b\x07\xcf\x68\x3c\xa5\xa9\xa8\x7c\xf3\x71\x97\x65\x1c\xee\x07\xe8\x29\xe8\x23\xa5\x1f\x21\x30\xf4\xfd\x52\x22\xcf\x02\xbe\xca\xde\xb4\xd6\x6e\x82\x35\xfa\xa4\xe0\xab\xfd\x83\xa7\x3c\xe1\x89\x72\x68\x93\xa6\x19\x5f\x09\xfe\x6e\x29\xf3\x55\x0c\x40\xc7\x56\xc1\xaa\xae\xdd\x55\xd4\x91\x0b\xe9\xa4\xe0\x73\x5d\x7f\x37\x13\x12\x43\x9a\x97\x97\xff\xdf\xb8\x09\x89\x15\x3c\xd6\x8f\x75\x51\x96\x65\x31\x57\x7d\x12\xfc\x27\xa5\x17\xa3\xe9\x2e\x6a\x4f\x4c\xca\xf3\x56\xae\x3e\xd3\x62\x4c\x7b\xe2\x19\x9b\x5b\x2b\xbc\x92\xad\xeb\xc0\xec\xa0\x7a\xf6\xfb\x44\x39\x43\xdf\x77\x1d\x7c\x30\x7e\x0f\xea\x0b\xc4\x64\x3c\xef\x60\xf1\x90\xab\x87\xbc\x18\x6a\x3e\x36\xb4\xc3\xd6\xb2\x08\xe5\xd0\x78\x58\x60\xe6\x16\x13\x57\x3a\x2c\x3e\x49\xcb\xdb\x09\xd0\x5f\x26\x2f\x5b\x71\xff\x96\x18\xc7\x89\x0c\x97\xde\x65\x22\x6c\x87\x79\x64\xd2\x89\x78\x3d\xb6\x39\xbf\xa5\xef\x2b\xb6\x17\x7b\x1c\xc2\x64\x81\x72\x86\xcb\x0f\x6a\x2d\x0d\x3d\x24\x49\x5d\xa3\x00\x07\xe6\x38\x8a\x1f\x91\x0f\x33\x5f\xcb\x51\xc1\x72\x72\xc6\x16\xf5\x91\x7c\x33\x77\x5a\xbe\xa8\xbf\x7e\xf7\x07\x4c\x29\xa3\x7a\x22\x0d\xf9\x46\x72\xfe\x05\x00\x00\xff\xff\x62\xda\x84\x0d\x46\x04\x00\x00")

func templatesK8sYamlBytes() ([]byte, error) {
	return bindataRead(
		_templatesK8sYaml,
		"templates/k8s.yaml",
	)
}

func templatesK8sYaml() (*asset, error) {
	bytes, err := templatesK8sYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/k8s.yaml", size: 1094, mode: os.FileMode(420), modTime: time.Unix(1565288430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x4f\x1c\x3b\x10\x3c\x8f\x7f\x85\x9f\x2f\xcf\x83\x76\x3d\xbc\x1b\x42\xe2\x80\x10\xfb\x40\x8a\x00\x41\x24\x0e\x51\x0e\xde\x99\x1e\x8f\x83\xc7\x9e\xb4\xdb\x2c\xc9\x68\xff\x7b\x64\xcf\xf2\x71\x48\xa4\x9c\x2c\x55\x57\x55\x97\xbb\x7b\xd2\xed\x93\x36\xc0\x47\x6d\x3d\x63\x76\x9c\x02\x12\x97\xac\x12\xfd\x48\x82\x55\xc2\x03\x35\x03\xd1\x24\x18\xab\x06\xd0\x8e\x06\x2e\x74\xa4\xa4\x91\x54\x1b\x1a\x13\xd6\x0b\xda\x0e\xd0\x3e\x65\x81\xb1\x34\xa4\xad\x6a\xc3\xd8\x98\x80\xd6\x39\xdd\x0c\xda\x77\x0e\x30\xfe\xa1\x3c\xa6\x17\xc1\xaa\x6f\x1a\x0c\x60\xdb\x1b\xfe\x91\x93\xb6\x80\xcd\x52\x5a\xb7\xce\x82\xa7\xb5\x09\x4d\x1b\x7c\x6f\x8d\x60\x35\x63\x7d\xf2\x6d\x09\x2f\x6b\x3e\xb3\x2a\xeb\x4f\xcf\x78\x04\x4a\xd3\x45\x61\xc9\x9a\x55\xce\xa8\x6b\xdf\x07\x29\x22\x69\x24\xe8\x44\xcd\x0a\x75\xc5\x01\x31\xf3\xdf\x9a\xab\x0d\x86\xf1\xd2\x3f\x67\x95\xed\x4b\xf9\x9f\x33\xee\xad\xcb\xe6\x95\x0b\x06\x53\x54\x8f\x96\x86\x4b\xc4\x80\x12\x10\x6b\xb5\xd1\xa4\x9d\x14\x6d\x48\xae\xf3\xff\x12\x77\x41\x77\x9c\x50\xb7\x80\xfc\x90\xb4\x66\xd5\x9e\x55\x0b\xb6\xe2\xad\x0b\x31\xbf\x87\xe6\xb9\xed\xb5\xb7\xf4\xbf\x0b\x5b\xed\x3e\x17\x92\x14\xf3\xcc\xd5\x8d\x1e\x81\xef\xf7\x25\x2e\x42\xf9\xd9\x32\x6d\x75\x03\xbb\x7b\x30\x36\x12\xfe\xc8\x51\x8b\xcf\x98\x5e\x0a\x1e\x12\x01\x16\x54\xdd\x69\x1a\xa4\x68\x16\x91\xa8\xd5\xd5\xb2\x09\x89\x60\xb2\xa7\x9e\x6c\x16\x2e\xbc\x3b\x84\xde\xbe\x48\xd1\xe8\xc9\x36\xcf\xff\x89\x5a\x3d\xa4\x2d\xbe\x9a\x15\xf2\xab\xdf\xbb\xd3\x26\xf9\x56\x96\x1d\xc8\x1d\xcf\x77\xa2\xee\x21\x4e\xc1\x47\x78\x44\x4b\xf9\x93\xc8\x8f\x0e\xf8\xf7\x04\x91\xca\x96\xaa\x7e\x24\xb5\x99\xd0\x7a\xea\xe5\x6e\xc5\xc5\x00\xce\x05\xbe\x0b\xe8\xba\x32\xab\xdc\x6f\x9e\xb9\xed\xb9\xba\xb8\xbd\x7f\xe0\xeb\xfd\xbe\x6c\x71\x19\x75\xf1\xfb\x64\x23\x81\x3f\xf7\xdd\x03\xe0\x33\x48\x56\x55\xe2\xf4\xe4\xf8\xe4\x58\xac\x38\xab\xaa\xd7\x93\x2b\xf2\x5c\x7c\x47\xce\x9d\x0b\x3b\xe8\xae\x40\x77\x80\x51\x7e\xf9\x1a\x09\xad\x37\xb3\x38\x4f\x34\x04\xb4\x3f\x35\xd9\xe0\xc5\xbe\x5e\xfd\x4e\x76\x8b\xd6\x58\xff\x51\x76\x74\xa0\xd6\x12\xf3\x5b\xd7\x6c\x9e\x39\xb8\x08\x7f\x91\xfa\x2d\x32\x1e\x64\xbe\x2b\xaa\x3d\xfb\x15\x00\x00\xff\xff\x12\xf6\x99\x60\x98\x03\x00\x00")

func templatesMainGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGo,
		"templates/main.go",
	)
}

func templatesMainGo() (*asset, error) {
	bytes, err := templatesMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go", size: 920, mode: os.FileMode(420), modTime: time.Unix(1622862901, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRunnerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x48\x2b\x4a\x2d\xce\x50\x48\xce\xcf\x4b\xcb\x4c\xe7\xe2\xca\x4c\xcf\xcb\x2f\x4a\x4d\xb1\x52\x28\x4f\x4d\xd2\x51\x28\xc9\x2d\xd0\x51\x48\x2c\x2e\x4e\x2d\x29\xe6\x02\x04\x00\x00\xff\xff\x3c\xbc\xcd\x0e\x2a\x00\x00\x00")

func templatesRunnerConfBytes() ([]byte, error) {
	return bindataRead(
		_templatesRunnerConf,
		"templates/runner.conf",
	)
}

func templatesRunnerConf() (*asset, error) {
	bytes, err := templatesRunnerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/runner.conf", size: 42, mode: os.FileMode(420), modTime: time.Unix(1551887851, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.envrc": templatesEnvrc,
	"templates/.gitignore": templatesGitignore,
	"templates/Dockerfile": templatesDockerfile,
	"templates/Makefile": templatesMakefile,
	"templates/config.go": templatesConfigGo,
	"templates/k8s.yaml": templatesK8sYaml,
	"templates/main.go": templatesMainGo,
	"templates/runner.conf": templatesRunnerConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".envrc": &bintree{templatesEnvrc, map[string]*bintree{}},
		".gitignore": &bintree{templatesGitignore, map[string]*bintree{}},
		"Dockerfile": &bintree{templatesDockerfile, map[string]*bintree{}},
		"Makefile": &bintree{templatesMakefile, map[string]*bintree{}},
		"config.go": &bintree{templatesConfigGo, map[string]*bintree{}},
		"k8s.yaml": &bintree{templatesK8sYaml, map[string]*bintree{}},
		"main.go": &bintree{templatesMainGo, map[string]*bintree{}},
		"runner.conf": &bintree{templatesRunnerConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

