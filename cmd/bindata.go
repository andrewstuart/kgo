// Code generated by go-bindata.
// sources:
// templates/.envrc
// templates/.gitignore
// templates/.main.go.swo
// templates/Dockerfile
// templates/Makefile
// templates/config.go
// templates/k8s.yaml
// templates/main.go
// templates/otel.go
// templates/runner.conf
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnvrc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf7\x37\x34\x34\xf4\xf5\x77\x09\xf5\x71\xb5\xcd\xcf\xe3\x02\x04\x00\x00\xff\xff\x23\xba\x3e\x29\x0f\x00\x00\x00")

func templatesEnvrcBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnvrc,
		"templates/.envrc",
	)
}

func templatesEnvrc() (*asset, error) {
	bytes, err := templatesEnvrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.envrc", size: 15, mode: os.FileMode(420), modTime: time.Unix(1564034532, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\x28\xe0\x2a\xc9\x2d\xe0\x02\x04\x00\x00\xff\xff\x57\x45\x21\xbf\x08\x00\x00\x00")

func templatesGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_templatesGitignore,
		"templates/.gitignore",
	)
}

func templatesGitignore() (*asset, error) {
	bytes, err := templatesGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.gitignore", size: 8, mode: os.FileMode(420), modTime: time.Unix(1551887816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainGoSwo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\xcd\x8b\x25\x57\x19\xc6\x9f\x11\x49\xe6\xf4\xed\x7b\xaf\xc4\x0f\xdc\xe5\xa4\x74\x51\x35\xde\xa9\xea\x1e\x25\x0c\x83\x0d\x76\x12\xc7\x1e\x98\x2f\xbb\xa7\x93\x45\x90\x70\xba\xea\xad\xba\xc7\xae\x3a\xa7\x3c\x75\xaa\x6f\x8f\x6d\xc7\x85\x1b\xb7\x42\x70\x63\x82\x28\x82\xa0\x82\xfa\x1f\x28\x18\x88\x4b\xd1\x99\x85\x4b\xdd\x18\x70\x13\x03\x82\xe0\x42\xce\xa9\x7b\x27\x33\xa3\xce\xe0\x46\x0d\x9c\xdf\xa6\xfa\x3d\x1f\xef\x79\xde\x8f\x3a\x4d\xd3\x75\xb0\xf1\xe2\x95\x6b\xfc\x62\x7a\x01\x00\x3e\x04\xfc\xfd\x67\xd9\xc1\x6b\x78\x0e\xdf\xf8\xc8\x3a\x84\x2a\x0c\x2d\xf0\x58\x0a\xea\x0e\xad\x6e\x1f\xbb\xee\xd5\xc1\x61\xd6\x99\x3c\xab\xb4\x7f\x88\xce\xf6\xc2\xd8\x34\xd7\xd9\x61\xa5\xb3\xbc\x29\x32\x4b\x4d\x5b\x0b\x4b\x5d\xd6\x08\xa9\xd2\x4a\x3f\x5e\x40\x20\x10\x78\x34\xbd\x2d\xcf\x5f\x1c\xe3\xd3\x17\x36\x37\x9c\xf9\x89\xe8\x19\xfe\xe1\xa7\xf6\xff\xd7\xaa\x02\x81\x40\x20\x10\x08\x04\x02\x81\xc0\x7f\x11\xdb\x9e\xc1\xd7\x01\x7c\x60\x69\x5f\x5f\x3e\xcf\x3c\xf4\x0c\x04\x02\x81\x40\x20\x10\x08\x04\x02\x81\x40\x20\xf0\xfe\x45\x14\xc0\x1b\x4f\x02\xef\x9c\x1d\xfe\xff\xbf\xfa\xfb\xff\xdd\x29\xf0\x97\x29\xf0\xf6\x14\xf8\xc3\x14\xb8\x3b\x05\xee\x4c\x81\x9f\x4f\x81\x6f\x4e\x01\x39\x05\x6e\x4c\x81\x74\x0a\x3c\x35\x05\xfe\x3c\x01\x7e\x3d\x01\xbe\x3b\x01\xde\x98\x00\xaf\x4f\x80\x6f\x4f\x80\x0b\x13\xe0\xee\x18\xf8\xdd\x18\xf8\xed\x18\x78\x73\x0c\xfc\x60\x0c\xbc\x36\x06\x5e\x1d\x03\x5f\x1e\x03\x72\x0c\x5c\x1d\x03\xcf\x8e\x81\x8f\x8d\x81\x8f\x8e\x81\xb7\xd7\x81\x3f\xad\x03\xbf\x59\x07\xbe\xb5\x0e\xec\xac\x03\x9b\xeb\xc0\xd3\xeb\xc0\x5b\x23\xe0\x97\x23\xe0\x27\x23\xe0\x87\x23\xe0\xfb\x23\xe0\x7b\x23\xe0\xc5\x11\xf0\xf4\x08\x98\x8c\x80\xf1\x08\xf8\xfd\x1a\x70\x77\x0d\xb8\xb3\x06\xfc\x62\x0d\xf8\xe9\x1a\xd0\xaf\x01\x2f\xaf\x01\x9f\x5c\x03\xfe\xc6\x80\x77\x18\xf0\x47\x06\xdc\x61\xc0\x5b\x0c\x78\x93\x01\xbf\x62\xc0\x8f\x19\xf0\x23\x06\xbc\xce\x80\xef\x30\xe0\x8b\x0c\xd8\x66\xc0\xe7\x18\x70\x81\x01\x9b\x0c\xf8\x38\x03\x9e\x64\xc0\x5f\xcf\x02\xef\x9e\x5d\xe6\x30\x10\x08\x04\x02\x81\xc0\xff\x1f\xa7\x60\xa7\x60\xac\xd6\x55\x7a\x53\x28\x99\xc7\x64\x4c\x02\x26\x4b\x4e\xc6\xf0\x67\xb6\xb8\x92\x35\x3f\x01\x73\xd6\x16\xef\xcc\x51\xba\x37\xef\x6d\xa1\x17\x2a\xce\xed\x71\x02\xb0\x4a\xf3\xce\xea\x76\x65\x16\x54\x92\xe1\xb9\x50\x39\xd5\x71\x02\x96\xdb\xe3\xd9\xd2\xe4\x97\xb6\x78\xae\x95\xa5\x63\x9b\xbe\x24\xed\xfc\x96\x6c\x48\xf7\x36\x5e\x8d\x3d\x27\xf2\xc3\xca\xe8\x5e\x15\x71\x32\xe3\x9b\x1b\xe7\xac\x6c\x28\xdd\xa3\x5c\xab\xc2\xb9\xfe\xec\xf9\xdc\x1e\xa7\x2f\x68\x45\xf1\xea\x60\x73\x94\x5e\x95\x9d\x25\xb5\xad\x8a\x3d\x32\x47\xc3\x8c\x8b\xe8\xe4\x84\x93\x2a\xf8\xf9\x53\x67\xec\x08\x55\xd4\x64\x2e\x71\x33\x5b\x4e\xd5\x1d\x2d\xe7\x92\xd8\x24\x6e\x94\xcd\x87\x45\x5d\xba\x5d\xd7\x7a\x41\xc5\x0d\x23\x2b\xa9\xba\xf8\xe5\x2f\x75\xd6\x48\x55\x9d\x44\xe7\xa2\xd3\x7f\xbd\x74\x87\x44\x41\xe6\xfe\xa5\xdb\xbd\x9d\x6b\x23\xbf\x2a\xac\xd4\x6a\xb9\xed\x9e\x8a\x7b\xdb\x9f\xbf\xb1\xbb\x17\x0f\x8a\x64\xc9\xbd\xe9\x55\x3d\xb1\xac\xce\x19\x00\x1f\x5c\xfe\xfc\xc4\x7d\x55\x5b\x8d\x31\xb6\x5d\x14\xe6\x12\x8f\x2e\x5d\xdc\xb8\xb8\x11\xcd\xc0\x3a\x73\xe4\xd2\x3c\xb7\xb6\x4d\x7d\x42\xcc\x89\x4b\x48\x02\xc6\xca\xc6\xa6\x97\x5b\x23\x95\x2d\xe3\xc5\x8c\x47\x73\xaa\x6b\xcd\x23\xfe\x29\x9e\x97\x55\xfa\x05\xb2\x7b\x5e\x7b\x1c\x29\xd1\x50\x94\xb8\x44\x2e\xab\xd9\xb5\xe9\xe7\x5d\x51\xc0\x86\x72\x76\xad\x3b\x43\x5b\xaa\xd3\x5b\x46\xe4\x64\xe2\x68\xf9\x71\x6a\x94\xa4\x7b\x56\x18\x1b\xfb\x75\x7e\x34\x4a\xc0\x44\x2b\xd3\x9b\xc2\xce\xe3\x28\x8b\x92\x74\x99\x87\xcb\xbd\xca\xe3\xb2\x57\x39\x8f\x17\x83\xe0\x5d\xea\x5a\xad\x3a\x7a\xc9\x48\x4b\x66\xc6\x0d\x3f\xb7\x1c\xff\x4a\x4f\x9d\x4d\xf8\x10\x8b\xd3\xe1\x23\x62\xf3\x21\xc6\x9d\x5b\xb7\x6e\xba\x90\x8c\x1f\x3c\xf5\x42\x9d\x54\x93\xee\x52\xae\x4d\x31\xa8\x19\xba\x49\xaa\x9c\xe2\xce\x69\x4c\x96\xad\xd5\xb9\x6e\x13\xd6\x1a\x79\xd0\x5b\x4a\x57\x59\x68\x85\x9d\x47\x33\x6e\xd2\xfd\xdd\xab\x5e\xbc\x3f\x77\x99\x11\x27\x3b\x76\x7a\x18\x63\xde\x99\x4b\x88\x3f\xe0\xba\x5e\xf8\xf3\x0d\xd9\xde\xa8\x21\xae\x87\x03\xfe\x0f\xe2\xf5\xa9\xdb\xef\x28\x6e\xfa\xe3\xf4\x9a\x2c\x8a\x9a\x16\xc2\xd0\x7b\xae\xe6\x0f\x1c\x91\x3c\x60\xb9\xfd\x59\xc6\xf7\x3b\xe2\xcd\xbd\xad\xfc\xca\xee\x55\x78\xbf\x4e\xb3\xf1\xa1\xdd\x34\x54\xca\xe3\x38\xca\x44\x2b\xb3\xa3\x4d\x57\xc5\xfe\xc0\xe8\xde\x92\xf1\x2f\x94\x59\x55\x6f\x4e\xa2\xb6\xf3\xf7\x6a\x18\x1b\xaa\x12\x30\xe3\x5c\x39\x85\xd7\x69\xb1\xbb\xda\xc6\x0c\x55\xbe\x17\xfd\x1e\x3f\x45\x95\xec\xac\xb9\xed\x7d\xd6\x55\x7a\x45\x95\x3a\x8e\x7c\xfe\xa8\x70\x7d\x92\x97\x7e\x47\x47\xb6\x6f\x9f\xd7\xaa\x94\x95\xf3\xe3\xcd\x1b\x96\xea\xe1\x8e\x71\x3d\xe8\xcf\xd3\x86\x56\x57\xc7\x65\x6d\xf6\x64\xa5\x44\xdd\xc5\x09\x7c\x4f\xb9\xd6\xf3\x15\x82\xdf\x61\x38\xe7\x5b\xbc\x21\x4b\xc6\x29\xb9\x5c\x6b\x61\x9f\xfd\xcc\x8e\xec\xac\xae\x8c\x68\xe2\xe1\x6d\x78\x65\xa1\x4d\x5d\xbc\x52\x0b\x4b\x2a\xbf\x1d\xcd\xb8\x54\x9d\x35\x7d\x43\x6a\xb8\xb1\xf6\x95\xb4\x71\xaf\xa4\x5d\xdd\x4a\x09\x98\xf7\xc9\xb7\x78\x55\xeb\x03\x51\xa7\xd7\x9c\x19\x47\x27\x27\x3c\xbd\x2e\x1a\xe2\x5f\xe3\xee\x86\x30\xfc\xf4\x34\x9a\xb9\xf3\x8d\xcc\xbd\xab\x17\xa8\xcb\x8d\x6c\xdd\xf5\x10\x47\xae\x73\xb8\x15\x87\xa4\x78\xa9\x0d\x6f\x65\xce\xdd\x15\x5b\x6b\x51\xb8\x17\xf1\x48\x18\x1e\xfb\x40\xa2\x4a\xa7\xba\x25\x65\xa9\x26\xe7\xec\x76\x2a\x75\xe6\x5e\xc4\x6c\x70\x9d\x0d\x2a\xa2\xc7\xaf\x7c\xe4\x92\x7b\x6f\xc3\xa3\x56\xf9\x39\x69\xe7\xfd\x41\x9a\xeb\x26\xab\x74\xdb\x97\x65\x76\x5f\x55\xfe\x69\x81\x91\x75\x2d\xb2\xa6\x3f\xfe\x37\x33\xab\x7b\xf1\xa1\xe9\xe1\x3b\xf9\xe1\xd3\xf8\xac\xe9\x6b\x2b\xc9\x18\xf7\x8b\xa2\x8d\xc0\x86\xee\xe2\xd1\x7d\x9f\xce\x57\xfa\xfc\x30\x9a\xcf\x29\x3f\x8c\x00\x16\x29\xb2\x99\x7b\x33\x9c\xe7\xb2\xb1\x11\x64\xd3\x6a\x63\x5d\x56\x5b\x91\x1f\x8a\x8a\x7c\xc3\xe0\x1f\x01\x00\x00\xff\xff\x40\xac\x6b\xa6\x00\x30\x00\x00")

func templatesMainGoSwoBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGoSwo,
		"templates/.main.go.swo",
	)
}

func templatesMainGoSwo() (*asset, error) {
	bytes, err := templatesMainGoSwoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.main.go.swo", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1647292677, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x48\xcf\xcf\x49\xcc\x4b\xb7\x4a\xcc\x29\xc8\xcc\x4b\xe5\x72\xf5\x0b\x09\x8a\x0c\xf0\xf7\xf4\x0b\x51\xd0\x4f\x2c\x28\xe0\x0a\xf7\x0f\xf2\x76\xf1\x0c\x52\xd0\x4f\xcf\xd7\x2f\x2e\x4a\x06\x8b\x71\x39\xba\xb8\x28\x24\x16\x14\x28\xe8\x73\x01\x02\x00\x00\xff\xff\xcd\x75\x7e\xe4\x42\x00\x00\x00")

func templatesDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerfile,
		"templates/Dockerfile",
	)
}

func templatesDockerfile() (*asset, error) {
	bytes, err := templatesDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Dockerfile", size: 66, mode: os.FileMode(420), modTime: time.Unix(1636764845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\xc1\x8e\x9b\x30\x10\x86\xcf\xcc\x53\x8c\x56\x3e\xd8\x52\x71\xb6\xb7\x0a\x89\x83\x1b\x28\xbb\x6a\x37\x50\xd8\x7b\x42\xc0\x21\x28\x06\xa3\xd8\x48\x89\x10\xef\x5e\xc5\xa1\xb4\x27\xd0\x7c\xf6\x37\xff\x8c\x45\x96\x85\xd3\x84\x7c\x57\x76\x12\xe7\x19\xde\x3f\x44\x12\xbb\xca\x7b\x57\x36\xae\x14\xa5\xdb\x9f\x71\xbe\xcf\xd3\xf4\xd3\x81\x48\x57\x17\x79\xcd\xb5\xb6\x0f\xba\x13\x1f\x71\x91\x89\x6d\xbc\x6a\xcc\x50\x56\xee\x22\xfc\xf8\xfd\x29\x92\x90\xd0\xff\x0c\x6c\x43\xa8\xeb\xc1\x00\x8a\x37\x11\x12\x6a\xce\x52\x29\xac\x9d\x14\xdb\xde\x0c\xb2\xb2\xe8\xfb\x27\x7d\xed\x4a\x8b\x2f\xd3\x74\x98\x26\x6c\xfb\x5a\xde\x90\xe7\x72\xd0\x51\xdb\x48\x63\x0d\xbe\xe2\x3c\x1f\xe6\xf9\x05\x09\xfd\xca\x18\x80\x95\xc6\x06\xe0\x35\x1a\x1f\x7f\xc8\x37\x9c\x73\x80\x46\x07\xe0\x6d\x93\x74\x1f\xef\xc4\xf7\x5f\x71\x14\xbe\x62\x92\xa6\x45\xa8\xda\x7e\xbc\x61\xa3\xf1\x38\xb6\xaa\x46\x5f\x63\x39\x0c\x00\xcf\x18\x01\x2e\x16\xf0\x96\x5c\xcb\x29\x8b\x84\xba\xa1\x18\x72\x5c\xe1\x30\x9a\xf3\x0a\x00\x6a\x39\x28\x7d\x0f\x96\x91\xc0\xbb\x8c\x47\x59\x59\xf5\x68\xa0\xee\xe8\x9f\xf0\xf2\xcd\xf0\x7b\xd9\xa9\x7f\xc8\xf7\xfb\x75\x71\x84\xae\x2b\x65\x68\xa4\xc5\xd6\x3d\xc4\xd3\xda\xc9\xde\x6e\x08\x15\x59\xc6\xf0\xf9\x09\x09\xad\x4a\xa5\xb0\x78\x13\x5f\xfe\x66\x60\xf0\x27\x00\x00\xff\xff\x51\xf2\x28\x5d\xd7\x01\x00\x00")

func templatesMakefileBytes() ([]byte, error) {
	return bindataRead(
		_templatesMakefile,
		"templates/Makefile",
	)
}

func templatesMakefile() (*asset, error) {
	bytes, err := templatesMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Makefile", size: 471, mode: os.FileMode(420), modTime: time.Unix(1636764852, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConfigGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xc1\x6a\xdc\x30\x10\x3d\x5b\x5f\x31\x15\x3d\xc8\xa5\x68\x29\xbd\xb5\xec\x21\xa4\x86\x96\xd2\x24\x24\xd0\x3d\x06\x55\x1e\xcb\xa2\xb6\x64\xc6\x23\xb7\x61\xeb\x7f\x2f\xb2\x77\x43\x36\x6c\x0b\xb9\x18\x31\xef\xcd\x7b\xcf\x4f\x1a\x8c\xfd\x69\x1c\x42\x6f\x7c\x10\xc2\xf7\x43\x24\x06\x25\x0a\x39\x32\xf9\xe0\x46\x29\x44\x21\x9d\xe7\x36\xfd\xd0\x36\xf6\x9b\x66\x0c\x91\x7d\xf3\xf0\x78\x90\xa7\xf8\xe8\x29\x0d\x23\x86\x4d\x17\x1d\xa5\xf1\x39\x3a\x34\xef\xde\x6f\x26\x3f\x20\x49\x51\x0a\x31\x19\xca\x66\x9d\x83\x2d\xac\x0b\xfa\x0a\x7f\xa9\x32\x63\x4d\x0a\x16\x46\xe4\x34\x5c\xc6\xd0\x78\xa7\x4a\x78\xb3\x6c\xea\xef\xf9\x0b\x7b\x51\xd8\xc6\xc1\x87\x2d\xac\xd3\x75\x31\xcf\xf4\x45\x5d\xaf\x3b\x37\x86\x5b\x25\xb5\x3c\x3f\x7f\xfd\xf9\xfa\x5b\xb5\xd9\xef\x41\x5f\x99\x1e\x61\x9e\xff\xc1\xdb\x20\xdb\x67\xb4\x95\x77\x87\xbc\xf2\x32\xa0\xe4\x19\xa5\x3b\xe4\x2a\x4c\x37\x84\x8d\xff\xfd\x84\xf0\x07\xd2\x90\xff\xe1\x54\xeb\x13\x36\x26\x75\xac\x64\x30\x3d\xca\xb7\xf0\x5f\xfe\x45\xe2\xd8\x1b\xf6\xb6\x0a\x93\x3a\x71\xfb\x8a\x0f\xb7\x38\x74\xc6\x22\xa9\xc3\x2d\xe6\x72\x1e\x67\x52\x67\xed\x7b\x59\x66\x29\xdf\x00\x12\xe5\x16\xb3\xc0\x2d\x9a\xfa\x4b\x38\xf6\xfd\x71\x81\x5e\x6d\x21\xf8\x2e\xd7\x5d\x74\x4e\xef\x3c\xb7\x15\x51\x24\x85\x44\xa5\x5e\x8f\xd2\xc6\xd4\xd5\x10\x22\x03\xa1\xa9\xc1\x07\xcf\xde\x74\x60\x17\xa1\xdc\xc5\x7c\x48\x7d\x7d\x10\xbf\x6c\x4d\x70\xa8\xf2\x1d\xab\x7b\x38\xbe\x25\x5d\x4d\x18\xb8\x5c\xbc\x5e\x14\xec\x4c\xb2\x9d\xa1\x70\x1a\xac\x8b\xa6\x7e\x12\xa9\x98\x45\x31\xe7\x0a\x5c\x5c\x2c\x76\x86\x6d\x7b\x74\x10\xa2\x20\xe4\x44\x21\x43\x62\x16\x7f\x03\x00\x00\xff\xff\xf2\xeb\x80\xb3\x27\x03\x00\x00")

func templatesConfigGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigGo,
		"templates/config.go",
	)
}

func templatesConfigGo() (*asset, error) {
	bytes, err := templatesConfigGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config.go", size: 807, mode: os.FileMode(420), modTime: time.Unix(1647024160, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesK8sYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x8b\xdb\x30\x10\xbd\xfb\x57\x0c\xa1\x0b\xed\xc1\x8e\xd3\xd3\x22\xe8\xa1\xb0\x97\x85\x36\x84\x16\x7a\x9f\xc8\x93\x44\x44\x5f\x95\xc6\xdb\x06\xe3\xff\x5e\x26\xb1\x5d\x27\xbb\x7b\x8b\x4e\xd2\xbc\x99\xd1\xd3\xbc\x27\x8c\xe6\x17\xa5\x6c\x82\x57\x80\x31\xe6\xe5\xcb\xaa\x38\x1a\xdf\x28\x78\xa2\x68\xc3\xc9\x91\xe7\xc2\x11\x63\x83\x8c\xaa\x00\xf0\xe8\x48\x41\xd7\x41\xb5\x46\x47\xd0\xf7\x43\x2c\x47\xd4\x33\xe0\x7c\x14\x34\x47\xd2\x52\x97\x28\x5a\xa3\x31\x2b\x58\x15\x00\x99\x2c\x69\x0e\x49\x10\x00\x87\xac\x0f\xdf\x70\x4b\x36\x5f\x02\x20\x5c\x6e\x6f\x61\x72\xd1\x22\xd3\x50\x33\xe3\x24\xcb\x5e\x95\xbf\xd9\x00\x60\x24\x23\x4b\x07\xcf\x68\x3c\xa5\xa9\xa8\x7c\xf3\x71\x97\x65\x1c\xee\x07\xe8\x29\xe8\x23\xa5\x1f\x21\x30\xf4\xfd\x52\x22\xcf\x02\xbe\xca\xde\xb4\xd6\x6e\x82\x35\xfa\xa4\xe0\xab\xfd\x83\xa7\x3c\xe1\x89\x72\x68\x93\xa6\x19\x5f\x09\xfe\x6e\x29\xf3\x55\x0c\x40\xc7\x56\xc1\xaa\xae\xdd\x55\xd4\x91\x0b\xe9\xa4\xe0\x73\x5d\x7f\x37\x13\x12\x43\x9a\x97\x97\xff\xdf\xb8\x09\x89\x15\x3c\xd6\x8f\x75\x51\x96\x65\x31\x57\x7d\x12\xfc\x27\xa5\x17\xa3\xe9\x2e\x6a\x4f\x4c\xca\xf3\x56\xae\x3e\xd3\x62\x4c\x7b\xe2\x19\x9b\x5b\x2b\xbc\x92\xad\xeb\xc0\xec\xa0\x7a\xf6\xfb\x44\x39\x43\xdf\x77\x1d\x7c\x30\x7e\x0f\xea\x0b\xc4\x64\x3c\xef\x60\xf1\x90\xab\x87\xbc\x18\x6a\x3e\x36\xb4\xc3\xd6\xb2\x08\xe5\xd0\x78\x58\x60\xe6\x16\x13\x57\x3a\x2c\x3e\x49\xcb\xdb\x09\xd0\x5f\x26\x2f\x5b\x71\xff\x96\x18\xc7\x89\x0c\x97\xde\x65\x22\x6c\x87\x79\x64\xd2\x89\x78\x3d\xb6\x39\xbf\xa5\xef\x2b\xb6\x17\x7b\x1c\xc2\x64\x81\x72\x86\xcb\x0f\x6a\x2d\x0d\x3d\x24\x49\x5d\xa3\x00\x07\xe6\x38\x8a\x1f\x91\x0f\x33\x5f\xcb\x51\xc1\x72\x72\xc6\x16\xf5\x91\x7c\x33\x77\x5a\xbe\xa8\xbf\x7e\xf7\x07\x4c\x29\xa3\x7a\x22\x0d\xf9\x46\x72\xfe\x05\x00\x00\xff\xff\x62\xda\x84\x0d\x46\x04\x00\x00")

func templatesK8sYamlBytes() ([]byte, error) {
	return bindataRead(
		_templatesK8sYaml,
		"templates/k8s.yaml",
	)
}

func templatesK8sYaml() (*asset, error) {
	bytes, err := templatesK8sYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/k8s.yaml", size: 1094, mode: os.FileMode(420), modTime: time.Unix(1565288430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xdc\x36\x10\x3d\x4b\xbf\x82\xe5\x89\x4a\x37\x54\x0a\x14\x45\x60\xd4\x07\x23\x89\xe3\x00\xf9\xc2\x6e\x8c\x1c\x8a\x22\xa0\xa5\x11\x45\x84\x22\xd5\xe1\x68\x77\xdd\xad\xfe\x7b\x31\xd4\xae\x1d\xa7\x6d\xda\x5e\x04\x68\xbe\xe7\xf1\xcd\x1b\x4d\xf3\xd9\x58\x10\x83\x71\xa1\x2c\xdd\x30\x46\x24\xa1\xca\x42\x76\x03\xc9\xb2\x90\x01\xa8\xee\x89\x46\x59\x96\x45\x0f\xc6\x53\x2f\xa4\x49\x34\x19\x24\xdd\xc4\xda\xc6\xc7\x8b\xb5\xe9\xa1\xf9\xcc\x09\xd6\x51\x3f\xdd\xe8\x26\x0e\xb5\x09\x2d\xc2\x6e\x09\xae\x87\xc9\x93\x03\x44\x8b\x71\x1a\xbf\x0a\xb4\x11\x9d\xf7\xa6\xee\x4d\x68\x3d\x60\xfa\x07\xf7\x30\xed\xff\xe2\x19\xa7\xae\xab\x87\x88\xd0\xc4\x40\xb0\xcf\x33\xdb\xa8\xe3\x08\x81\xc0\xc3\x00\x84\xb7\xda\xc5\x3a\x12\xf8\x6f\xf9\x6a\x43\x84\xee\x66\x22\xf8\x66\x14\xff\xb9\xe6\x3f\x84\xd4\xd6\xc7\x1b\xe3\x65\x59\x95\xe5\xd6\x20\x43\x3a\x00\x01\x8a\x73\xb1\x78\xf4\x1b\xfe\x55\xf2\x70\x10\xfa\xad\x19\x40\xfc\x21\x7c\xdc\x01\x8a\x79\x96\x2b\xb1\x14\xd1\x1f\x1d\xf5\xcf\x21\x35\xe8\x46\x72\x31\x28\x49\x6e\x00\x41\xe6\x33\x04\xd1\x45\x14\xa3\x6b\x44\x1b\x77\xc1\x47\xd3\xca\xaa\x2a\x8b\x86\x50\x08\x71\x2e\x72\x2f\xfd\x16\x76\x97\x3e\x1a\xfa\xe9\xc7\x2b\x97\x28\x5a\x34\x83\x92\x3d\x78\x1f\x3f\xed\x22\xfa\xf6\x93\x37\x04\xa1\xb9\x95\x2b\xe1\x42\x22\x9c\x06\x08\x94\x9b\x5e\x07\x47\x6a\x0a\x8e\xf4\x86\x91\x6d\xab\x8a\x17\xe9\xa6\xd0\x64\xa6\xa8\x4a\x1c\xb8\xd9\x5e\x9c\x9d\x8b\x2f\xd0\xd7\x97\x11\x37\xce\x06\xe3\x93\xaa\xca\x22\xf5\x13\xf1\x78\x1c\x95\x80\xa6\xf1\x1d\x81\x57\x0d\xed\x79\xd2\xce\xde\x99\x9f\xc5\xd0\x39\xcb\x19\xde\xea\x57\xa1\x8b\x4a\x26\x32\x48\xd0\xca\xaa\x2c\x0b\x84\x1c\xba\x10\x8d\x97\x5a\x83\x75\x89\xf0\x96\x33\x30\x8f\x30\xed\xb3\x3d\x4e\x8c\x29\x5b\xf5\x7b\x43\xbd\x92\xf5\x92\x24\x2b\x7d\xb5\x70\x4b\x21\x58\xae\x69\x46\xc7\x89\x4b\xdc\x7b\x84\xce\xed\x95\xac\xcd\xe8\xea\xed\x0f\xb2\xd2\x9b\xe9\x06\x4f\xc5\xca\xa2\xae\xc5\x75\x02\x31\xb8\xb6\xf5\xb0\x33\x08\xe2\xd5\xfa\x75\xae\xa1\xaf\x13\x28\xee\xfe\xe6\xce\x77\x39\x85\x46\x31\x52\xaa\x17\x7c\x39\xa7\xce\xd5\x83\x3f\xc6\xaf\x40\xa0\x09\xc3\x03\xfb\x7d\xf6\x6e\xb1\xaf\x21\x8d\x31\x24\xf8\x88\x8e\x00\x57\x02\xc5\xa3\xa3\xfd\xb7\x09\x12\xe5\x87\x28\x8a\x0c\x17\x2f\xc4\x04\xd1\x6f\xe3\x8e\x41\x28\x8a\x16\x3a\x40\x91\xcb\x1d\x03\x99\x21\x7a\x0d\x4d\xc4\x96\x1f\x62\xb5\x24\x6c\x5c\x68\x40\xe5\x22\xd5\xf1\xc5\x93\xaa\x56\xe2\xee\x28\xf4\x86\xd0\x05\xab\xe4\x68\xa8\x97\x2b\x81\xfa\x7a\xfd\x3a\x63\x57\xe5\x46\xf3\xd2\xaf\xd7\x1b\xc0\x2d\x5c\x7d\xf8\xf0\x5e\xed\x56\x02\xd9\x38\x57\x65\x31\x57\x47\xcc\x4f\xcf\x72\xff\x20\x77\x0b\x8b\xff\xb5\x71\x9e\x3d\x8d\xbc\x32\x5f\x9d\xfe\x80\xa6\xe1\x73\x62\x76\x6a\x1b\xf9\x09\x79\x9b\x65\xc7\x6c\x95\x3c\xcc\x02\x48\x1a\xf5\x8b\xd0\xe6\xa7\x2d\xba\x81\xf4\xe5\x88\x2e\x50\xc7\x23\x2f\xe7\x21\xa4\xf8\x5e\x34\x9d\xd5\x2f\x81\x4e\x9b\x07\x33\x40\xbe\xb1\x99\xf3\x12\x6e\x33\x27\x79\xb0\xbc\x33\xf2\x54\x17\x6d\x8b\x67\x42\x9e\x3d\x7d\xf2\xf4\x89\x5c\x95\x45\x71\x38\x08\xd7\x09\xfd\xec\xdd\x7a\x23\x1e\xcf\x73\x59\x14\xc7\xb5\xcf\xc4\x49\xec\xb2\x53\x65\xf4\x4e\x96\x0b\xcf\x52\xd0\x5e\x81\x69\x01\x93\xfa\xe5\xd7\x94\x67\x38\xc8\x8b\x89\xfa\x88\xee\x77\xc3\x6a\x20\xe7\x6a\xf5\x77\x69\xef\xd0\x59\x17\xbe\x4c\x7b\x74\x0c\xad\x14\x56\xc7\xa9\xc0\x27\xf8\x7a\x22\x3c\xf9\x42\xbb\xb8\xe6\xb2\x2c\x6c\x14\x09\xb7\xfa\xb5\x4b\x04\xe1\x22\xb4\x79\xd9\x0c\xdd\xcf\x8f\x1b\xda\xeb\xe7\x31\x2c\xbf\xac\x72\x03\x58\xf1\x40\xe8\xf5\x4b\xfe\xb2\xf6\x59\xfd\x32\xaa\x23\x13\x01\x31\x3e\xb8\x80\x44\x71\x3c\xea\x02\xd3\xe5\xdf\xa2\x71\xab\x37\x47\x69\xb9\xcf\x2a\x0b\xc0\x45\x0c\xc0\xea\x8f\xc6\x11\x53\xd2\x75\x9c\x2e\xbe\x3b\x17\xc1\xf9\x5c\xc3\x47\x8b\x53\xca\x22\xf7\x82\x0b\x2b\x40\xac\xf4\xa5\x21\xe3\x95\x5c\x5a\xb1\x6c\x91\x0b\x36\x4b\xab\xb0\xcc\xac\x6e\xf2\xfe\x96\x19\x34\x97\x73\xf9\x67\x00\x00\x00\xff\xff\xf1\x10\x63\x23\x34\x07\x00\x00")

func templatesMainGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGo,
		"templates/main.go",
	)
}

func templatesMainGo() (*asset, error) {
	bytes, err := templatesMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go", size: 1844, mode: os.FileMode(420), modTime: time.Unix(1647292781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOtelGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdb\x6e\x24\x35\x10\x7d\xb6\xbf\xc2\x58\x42\x72\xa3\xc1\xc3\x02\xd2\x4a\x91\xf6\x01\xb2\x44\x20\x48\x88\x76\xb8\x3c\x3b\xee\x4a\x8f\xb5\x6e\xdb\x2a\x57\x4f\x26\x8a\xe6\xdf\x91\xdd\x3d\x57\xb2\x93\x80\xf6\xa5\xbb\x55\xae\xcb\xf1\xa9\x53\xd5\xc9\xd8\x8f\xa6\x03\xd1\x1b\x17\x38\x77\x7d\x8a\x48\x42\x71\x26\x6d\x0c\x04\x6b\x92\x9c\x49\x1f\xbb\xf2\x22\xd7\x83\xe4\x9c\xc9\x2e\xea\x98\x20\x10\x78\xe8\x81\xf0\x51\xbb\x38\x8f\x04\x5e\x9e\x39\x9b\x1b\x22\x74\x77\x03\xc1\x59\x2f\x58\x17\x00\x80\x79\x1e\xc9\xa7\xfa\x28\x0e\xce\xfe\xbf\xa8\x83\xcf\x0e\xd3\x7f\x4e\x42\x68\x2c\xec\xbf\x5e\x4c\x31\x15\xed\x7c\xbc\x33\xe7\xd9\x48\x18\x93\xe9\x0c\xb9\x18\x24\x67\x85\x6b\x8c\xde\x03\x8a\x4f\x87\xe4\xf6\xe3\xb6\xc0\xde\x7f\x7e\x67\x72\x25\x27\x61\xb4\x90\x73\x7c\x65\x86\x9d\xfb\x2e\xc1\xab\xc2\x32\x78\xb0\x14\x71\x9e\x5d\x9f\xfc\xf9\x56\x96\x30\x84\x1c\x07\xb4\x2f\x3b\x56\x7e\x25\x67\x19\x7a\x1b\xc3\xea\xdc\x25\x46\x8f\xf9\xea\x8d\x7e\xab\xbf\x91\xbc\xe1\xfc\x7e\x08\x56\x64\xa0\x21\xfd\x4e\xe0\x95\xa5\xb5\x98\xd4\xab\x2f\xc7\x77\x23\x8a\x8f\xfa\x97\x15\x10\x23\x8a\x27\xce\xe6\x73\xf1\x47\x81\x90\x39\x23\x9c\x15\xbb\xb8\x78\x27\x8e\x3a\xaf\x6f\xe0\xa1\xe4\x9e\x9d\x98\xff\x76\xb4\xfc\x29\xb4\x29\xba\x40\x4a\x1e\x81\xfe\xda\x96\x26\x15\xc2\xf4\x27\xec\x17\xdf\x7f\xf7\xe6\xad\x6c\x9e\xcb\xf9\x4b\xc8\x60\x07\x04\xd5\x34\x9c\xb9\xfb\x8a\xe9\x8b\x77\x22\x38\x5f\x00\x33\x1f\x3b\x7d\x65\xc8\x78\x05\x88\x0d\x67\x1b\xce\x10\xf2\x0e\xfa\x96\x79\x7d\x0d\xd8\x81\xe2\x8c\xed\x2c\xef\xe1\xde\x0c\x9e\x54\x33\x3b\xb4\xde\xc0\x43\xa9\xfa\xc3\x76\x4c\x73\x89\xd9\xf6\x43\x2f\xec\x12\x7a\xf3\xe7\x87\xdf\x66\x47\x56\xc0\x95\xb3\x70\x63\x7a\xf8\x15\x1e\xf5\x82\xd0\x85\x4e\xc9\xa7\x27\xa1\x8b\x4d\x6c\x36\xb2\x79\x2e\xe0\x2f\xc0\xec\x62\x38\x8c\x69\x61\x05\x3e\xa6\xc9\x7f\xb7\x2c\x76\xe7\x10\x56\x72\x26\x64\xc2\xd8\x0e\xb6\x8e\x4d\xf5\x2c\x8f\xd7\xd2\x53\xe4\xa3\x17\x40\xb5\xd1\x78\x8b\x71\xe5\x5a\x40\x55\x59\x2f\xd7\x3f\xb1\x73\xc6\xc6\xa3\x42\xcb\x87\x89\x26\x85\x90\x6b\xe1\xfd\xd1\x8f\x86\xec\xb2\xe6\xa9\x60\x9a\x83\x42\xb0\xa6\x6b\x93\x6e\xa7\x59\x8f\xa8\x0e\xc6\x5e\xd7\x72\x93\x12\x9f\x36\x0d\xaf\x22\xbc\xae\x73\x96\x39\xb3\xde\x41\xa0\xad\x08\xf7\x2b\xac\x00\xbd\xac\x67\xea\xe4\xe0\xf3\xe9\xf0\x24\xe9\x91\x10\x61\x9d\x8e\xc6\x63\xf4\xdd\xcf\xc6\x88\xfb\x7c\x4b\xee\x95\xbc\x32\xce\x43\x2b\x28\x0a\x8b\x60\x08\x04\x2d\x41\xec\xd0\x88\xed\x2e\xbe\x10\x5f\x96\xb6\x6f\x5b\xc8\x59\x1a\xf2\x12\x6a\xf1\xfd\x0e\xac\xc5\x39\xdb\xaf\xc0\x62\xb8\x32\x25\xd1\xe3\x28\xe2\xba\xac\xb6\x0a\xff\xd9\x65\x8a\x1d\x9a\xfe\xbd\xcb\xa3\xca\x5c\x0c\xe3\x30\xd4\xdb\x4d\xaa\x3a\x58\xca\x23\xb5\x13\x24\x05\xeb\xf4\xdc\xf9\xe5\x08\xfe\x16\xd0\xc5\x56\x7d\xfb\x55\xf9\x5b\xea\x05\xd8\x18\xda\x49\xa4\xe3\x6f\xa1\x08\xe3\x1a\xe8\x40\x68\xe3\x9d\x8a\x00\x10\x68\xc0\x20\x08\xf5\x62\x39\x50\x1b\x1f\x02\xdf\xf0\x7f\x02\x00\x00\xff\xff\x3a\xba\x01\x81\xa2\x07\x00\x00")

func templatesOtelGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesOtelGo,
		"templates/otel.go",
	)
}

func templatesOtelGo() (*asset, error) {
	bytes, err := templatesOtelGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/otel.go", size: 1954, mode: os.FileMode(420), modTime: time.Unix(1647292720, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRunnerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x48\x2b\x4a\x2d\xce\x50\x48\xce\xcf\x4b\xcb\x4c\xe7\xe2\xca\x4c\xcf\xcb\x2f\x4a\x4d\xb1\x52\x28\x4f\x4d\xd2\x51\x28\xc9\x2d\xd0\x51\x48\x2c\x2e\x4e\x2d\x29\xe6\x02\x04\x00\x00\xff\xff\x3c\xbc\xcd\x0e\x2a\x00\x00\x00")

func templatesRunnerConfBytes() ([]byte, error) {
	return bindataRead(
		_templatesRunnerConf,
		"templates/runner.conf",
	)
}

func templatesRunnerConf() (*asset, error) {
	bytes, err := templatesRunnerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/runner.conf", size: 42, mode: os.FileMode(420), modTime: time.Unix(1551887851, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.envrc": templatesEnvrc,
	"templates/.gitignore": templatesGitignore,
	"templates/.main.go.swo": templatesMainGoSwo,
	"templates/Dockerfile": templatesDockerfile,
	"templates/Makefile": templatesMakefile,
	"templates/config.go": templatesConfigGo,
	"templates/k8s.yaml": templatesK8sYaml,
	"templates/main.go": templatesMainGo,
	"templates/otel.go": templatesOtelGo,
	"templates/runner.conf": templatesRunnerConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".envrc": &bintree{templatesEnvrc, map[string]*bintree{}},
		".gitignore": &bintree{templatesGitignore, map[string]*bintree{}},
		".main.go.swo": &bintree{templatesMainGoSwo, map[string]*bintree{}},
		"Dockerfile": &bintree{templatesDockerfile, map[string]*bintree{}},
		"Makefile": &bintree{templatesMakefile, map[string]*bintree{}},
		"config.go": &bintree{templatesConfigGo, map[string]*bintree{}},
		"k8s.yaml": &bintree{templatesK8sYaml, map[string]*bintree{}},
		"main.go": &bintree{templatesMainGo, map[string]*bintree{}},
		"otel.go": &bintree{templatesOtelGo, map[string]*bintree{}},
		"runner.conf": &bintree{templatesRunnerConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

