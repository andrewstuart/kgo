// Code generated by go-bindata.
// sources:
// templates/Dockerfile
// templates/Makefile
// templates/config.go
// templates/k8s.yaml
// templates/main.go
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x48\xcf\xcf\x49\xcc\x4b\xe7\xe2\x0a\xf7\x0f\xf2\x76\xf1\x0c\x52\x50\x71\xf7\x0f\x70\x0c\xf1\xd0\x2f\x2e\x4a\xd6\x4f\x2c\x28\xe0\xe2\x72\x74\x71\x51\xd0\x53\xd0\xe3\xe2\x0a\x0a\xf5\x53\x48\xcf\x57\x48\x4f\x2d\x51\x50\x53\x03\xb1\x92\x4a\x33\x73\x52\x14\x74\xf3\x15\xc0\x0a\x01\x01\x00\x00\xff\xff\xc8\x9f\xe6\x83\x4e\x00\x00\x00")

func templatesDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerfile,
		"templates/Dockerfile",
	)
}

func templatesDockerfile() (*asset, error) {
	bytes, err := templatesDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Dockerfile", size: 78, mode: os.FileMode(420), modTime: time.Unix(1548916447, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x51\x6b\xf2\x30\x14\x86\xaf\x3d\xbf\xe2\x20\xb9\x48\xe0\x6b\xfc\x76\x37\x84\x5e\x04\xed\x54\x86\xda\x55\xef\x67\x6c\xa3\x16\xd3\x26\x98\x08\x93\x92\xff\x3e\x8c\xae\xdb\x55\xcb\xfb\x90\xe7\xbc\xbc\x22\xcf\xd3\xae\x43\xbe\x92\x8d\xc2\x10\x60\xb1\x14\xb3\x2c\x26\x8b\x46\x1e\x63\x34\x5d\x4f\xde\xb3\xe2\xb3\x58\xaf\xb7\x11\x4c\x4d\x79\x56\x97\xc2\x18\x7f\xa7\x2b\xb1\xcc\x36\xb9\x98\x64\xbd\xc6\x59\x59\xc6\x87\xf0\xf6\xb1\x15\xb3\x94\xd0\x3f\x06\x36\x22\x34\xde\x60\x00\x9b\xb9\x48\x09\x75\x27\xa5\x35\x56\x51\x8a\x75\xeb\xac\x2a\x3d\x26\xc9\xc1\x5c\x1a\xe9\x71\xd8\x75\xbb\xae\xc3\xba\xad\xd4\x17\xf2\x42\x59\x33\xad\x8f\xca\x79\x87\xff\x31\x84\x5d\x08\x43\x24\xf4\x85\x31\x00\xaf\x9c\x1f\xc3\xe0\x68\xf0\xfe\x87\x7c\xc4\x39\x07\x78\x78\xc7\x31\x83\xc1\xf3\xca\xfe\x5a\xeb\x0a\x13\x8f\x84\xc6\x8a\x0c\x39\xf6\xd0\x5e\xdd\xa9\x07\x00\x95\xb2\xda\xdc\xc6\xcf\x82\x30\x38\x5f\xf7\xaa\xf4\x1a\xa5\xb5\xfa\x86\xc9\x01\xcf\xaf\x8e\xdf\x64\xa3\x7f\x51\x92\xb4\xfd\x0c\x84\xf6\x03\x31\x74\xca\x63\x1d\x67\x7d\x58\x1b\xd5\xfa\x11\xa1\x22\xcf\x19\x3e\x3e\x29\xa1\xa5\xd4\x1a\x37\x73\xf1\xef\xa7\x03\x83\xef\x00\x00\x00\xff\xff\x0d\x5a\x42\xe7\xa5\x01\x00\x00")

func templatesMakefileBytes() ([]byte, error) {
	return bindataRead(
		_templatesMakefile,
		"templates/Makefile",
	)
}

func templatesMakefile() (*asset, error) {
	bytes, err := templatesMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Makefile", size: 421, mode: os.FileMode(420), modTime: time.Unix(1541574082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConfigGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xcd\x6a\xdc\x30\x10\x3e\x5b\x4f\x31\x15\x3d\xc8\xa5\x68\x29\xbd\xb5\xec\x21\x04\x43\x4b\x69\x12\x12\xe8\x1e\x83\x2a\x8f\x65\x51\x5b\x32\xe3\x91\xdb\xb0\xf5\xbb\x17\xd9\xbb\x61\x37\x6c\x0f\xb9\x18\x31\xdf\xcf\x7c\x33\xe3\xc1\xd8\x5f\xc6\x21\xf4\xc6\x07\x21\x7c\x3f\x44\x62\x50\xa2\x90\x23\x93\x0f\x6e\x94\x42\x14\xd2\x79\x6e\xd3\x4f\x6d\x63\xbf\x69\xc6\x10\xd9\x37\x4f\xcf\x0f\x79\x8e\x8f\x9e\xd2\x30\x62\xd8\x74\xd1\x51\x1a\x5f\xa2\x43\xf3\xe1\xe3\x66\xf2\x03\x92\x14\xa5\x10\x93\xa1\xdc\xac\x73\xb0\x85\x55\xa0\x6f\xf0\xb7\x2a\x33\xd6\xa4\x60\x61\x44\x4e\xc3\x75\x0c\x8d\x77\xaa\x84\x77\x8b\x52\xff\xc8\x5f\xd8\x8b\xc2\x36\x0e\x3e\x6d\x61\xad\xae\xc2\x5c\xd3\x57\x75\xbd\x6a\xee\x0c\xb7\x4a\x6a\x79\xb9\xfe\xf6\xcb\xed\xf7\x6a\xb3\xdf\x83\xbe\x31\x3d\xc2\x3c\xff\x87\xb7\x41\xb6\x2f\x68\x2b\xef\x01\x79\xe5\x65\x40\xc9\x0b\x4e\x0f\xc8\x55\x98\xee\x08\x1b\xff\xe7\x84\xf0\x17\xd2\x90\x67\x38\xf1\xba\x4a\x1c\x7b\xc3\xde\x56\x61\x52\x67\xea\x6f\xf8\x74\x8f\x43\x67\x2c\x92\x3a\x5c\x25\x0f\xfb\x5c\x93\x5a\xbe\x07\xf9\x28\xcb\x6c\xe5\x1b\x40\xa2\xbc\x95\x6c\x70\x8f\xa6\xfe\x1a\x8e\xfb\xfb\xbc\x40\x6f\xb6\x10\x7c\x97\xd7\x57\x74\x4e\xef\x3c\xb7\x15\x51\x24\x85\x44\xa5\x5e\x9f\xd2\xc6\xd4\xd5\x10\x22\x03\xa1\xa9\xc1\x07\xcf\xde\x74\x60\x17\xa3\x3c\xdb\x7c\x48\x7d\x7b\x30\xbf\x6e\x4d\x70\xa8\xf2\xcd\xd4\x23\x1c\xff\x0d\x5d\x4d\x18\xb8\x5c\x7a\xbd\x2a\xd8\x85\x64\x3b\x43\xe1\x3c\x58\x17\x4d\x7d\x12\xa9\x98\x45\x31\xe7\x15\xb8\xb8\xb4\xd8\x19\xb6\xed\xb1\x83\x10\x05\x21\x27\x0a\x19\x12\xb3\xf8\x17\x00\x00\xff\xff\x06\xd1\xf5\xdd\xf7\x02\x00\x00")

func templatesConfigGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigGo,
		"templates/config.go",
	)
}

func templatesConfigGo() (*asset, error) {
	bytes, err := templatesConfigGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config.go", size: 759, mode: os.FileMode(420), modTime: time.Unix(1551245405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesK8sYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc1\x8a\xdb\x30\x10\xbd\xfb\x2b\x1e\xa1\x0b\xed\xc1\x89\xd3\xd3\x22\xe8\xa1\xb0\x97\x3d\x34\x84\x16\x7a\x9f\xc8\x93\x44\x44\x96\x54\x69\x9c\x36\x18\xff\x7b\x51\x62\xbb\xce\x6e\xf7\xb6\x3a\x49\xf3\x66\x46\x4f\xf3\x9e\x28\x98\x9f\x1c\x93\xf1\x4e\x81\xff\x08\xbb\xbc\x4d\xab\xf3\x7a\xc7\x42\xeb\xe2\x64\x5c\xad\xf0\xc4\xc1\xfa\x4b\xc3\x4e\x8a\x86\x85\x6a\x12\x52\x05\xe0\xa8\x61\x85\xae\xc3\x72\x43\x0d\xa3\xef\x87\x58\x0a\xa4\x67\xc0\xf5\x98\xd1\x14\x58\xe7\xba\xc8\xc1\x1a\x4d\x49\x61\x5d\x00\xc2\x4d\xb0\x24\x9c\x11\x60\xde\x3f\x2f\x4b\x3b\xb6\x69\x3c\x01\x14\xc2\xcb\x2b\x81\xb1\x71\x5e\xda\x3b\x21\xe3\x38\x4e\x45\xe5\x7f\x89\xde\x96\x69\xe8\x30\x40\x4f\x5e\x9f\x38\x7e\xf7\x5e\xd0\xf7\xab\x1c\x79\xce\xe0\xab\xec\x6d\x6b\xed\xd6\x5b\xa3\x2f\x0a\x5f\xed\x6f\xba\xa4\x09\x8f\x9c\x7c\x1b\x35\xcf\xf8\xe6\xe0\xaf\x96\x93\xdc\xc5\x00\x1d\x5a\x85\x75\x55\x35\x77\xd1\x86\x1b\x1f\x2f\x0a\x9f\xab\xea\x9b\x99\x90\xe0\xe3\xbc\xbc\xfc\xf7\xc6\xad\x8f\xa2\xf0\x58\x3d\x56\x45\x59\x96\xc5\x5c\xcc\xf3\x28\xde\x0f\x8e\x67\xa3\xf9\x5d\x94\x9b\x98\x94\xd7\x6d\xbe\xfa\x4a\x4b\x28\x1e\x58\x66\x6c\x80\xc4\x96\xb5\xf8\x78\xe3\xfd\x4a\xb6\xae\x83\xd9\x63\xf9\xec\x0e\x91\x53\x42\xdf\x77\x1d\x3e\x18\x77\x80\xfa\x82\x10\x8d\x93\x3d\x16\x0f\x69\xf9\x90\x16\x43\xcd\xc7\x9a\xf7\xd4\x5a\xc9\x42\x35\x64\x1c\x16\x94\xa4\xa5\x28\x4b\xed\x17\x9f\x72\xcb\x97\x13\x78\xd3\xce\xc3\xa5\xef\x32\x11\xb1\xc3\x3c\x12\xeb\xc8\xb2\x19\xdb\x5c\xdf\xd2\xf7\x4b\xb1\x37\x7b\x1c\xfd\x64\x81\x72\x86\xe7\xdf\xd0\x5a\x1e\x7a\xe4\x24\x75\x8f\x02\x47\x91\x30\x8a\x1f\x48\x8e\x33\x5f\xe7\xa3\xc2\x6a\x72\xc6\x8e\xf4\x89\x5d\x3d\x77\x5a\xba\xa9\xbf\x79\xf3\x07\x4c\x29\xa3\x7a\x59\x1a\x76\x75\xce\xf9\x1b\x00\x00\xff\xff\x87\x7f\xb8\x09\x1d\x04\x00\x00")

func templatesK8sYamlBytes() ([]byte, error) {
	return bindataRead(
		_templatesK8sYaml,
		"templates/k8s.yaml",
	)
}

func templatesK8sYaml() (*asset, error) {
	bytes, err := templatesK8sYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/k8s.yaml", size: 1053, mode: os.FileMode(420), modTime: time.Unix(1547179257, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x6b\xdc\x30\x10\x85\xcf\xd2\xaf\x10\x3a\xc9\x61\x23\xa7\xb7\x10\xe8\x61\x09\x84\x14\x4a\x13\x76\x0f\x3d\x94\x1e\x14\x7b\x2c\x8b\xc8\x92\x3b\x1a\xc5\xdb\x1a\xff\xf7\x22\x3b\xdb\xf4\x90\x9c\x04\x6f\xde\xf7\xf4\x66\x46\xd3\x3c\x1b\x0b\x62\x30\x2e\x70\xee\x86\x31\x22\x09\xc5\x99\xec\x06\x92\x9c\xc9\x00\x54\xf7\x44\xa3\xe4\x9c\xf5\x60\x3c\xf5\x42\x9a\x44\xd9\x20\xe9\x26\xd6\x36\x5e\x6e\x6a\xd3\x43\xf3\x5c\x00\xeb\xa8\xcf\x4f\xba\x89\x43\x6d\x23\x3a\xef\x4d\xdd\x9b\xd0\x7a\xc0\xf4\xc1\x78\xc8\x27\xc9\x2b\xce\xbb\x1c\x9a\xb5\x87\xaa\xc4\xcc\x59\x02\xca\xe3\x6d\x0c\x9d\xb3\xaa\xe2\xcc\x5b\xfd\x25\x74\x51\xc9\x44\x06\x09\x5a\x59\x71\xce\x10\xac\xb8\xf9\x2c\xb6\x0a\xfa\x1b\x4c\x07\xb0\x2e\x11\xfe\x2e\x04\x96\xd1\x90\x4f\xab\x1e\x33\x01\xae\xaa\x7e\x34\xd4\x2b\x59\x6f\x90\xac\xf4\xfd\x56\x4f\x21\xd8\x92\x69\x46\x57\xc0\xcd\xf7\x88\xd0\xb9\x93\x92\xb5\x19\x5d\xfd\xf2\x49\x56\xfa\x98\x9f\xf0\x1c\xb6\x9a\xcf\x79\x6f\x49\x77\x39\x34\x6a\xdd\x46\x4d\xa2\x1c\x4f\x1f\x20\x8d\x31\x24\xf8\x8e\x8e\x00\x77\x02\xc5\xc5\xab\xfe\x2b\x43\xa2\x75\x5f\xd6\x0d\xa4\xef\x46\x74\x81\x3a\x35\xed\x84\xec\xc1\xfb\x28\xa6\x88\xbe\x2c\xcb\x96\xf2\xdf\x3c\x0b\xd7\x09\x7d\xfb\x70\x38\x8a\xcb\x65\xe1\x6c\x8d\xf9\xea\x12\x41\xd8\x87\xf6\x08\xf8\x02\x8a\x33\x26\x6f\xae\xaf\xae\xaf\xe4\x4e\x70\xc6\xce\xe7\x5f\xa9\x32\x7c\x53\xf6\xde\xc7\x09\xda\x7b\x30\x2d\x60\x52\x3f\x7e\x26\x42\x17\xec\x2c\xf7\x99\xfa\x88\xee\x8f\x21\x17\x83\x5c\xaa\xdd\x7b\xd8\x03\x3a\xeb\xc2\xff\xd8\xc5\xab\xb5\x52\x58\xde\x8a\xcf\xb3\x00\x9f\xe0\xe3\xae\xff\x8a\xe2\x66\x0e\xed\xea\x5d\xf8\xdf\x00\x00\x00\xff\xff\x0e\x41\x5d\xba\x99\x02\x00\x00")

func templatesMainGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGo,
		"templates/main.go",
	)
}

func templatesMainGo() (*asset, error) {
	bytes, err := templatesMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go", size: 665, mode: os.FileMode(420), modTime: time.Unix(1551245617, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Dockerfile": templatesDockerfile,
	"templates/Makefile": templatesMakefile,
	"templates/config.go": templatesConfigGo,
	"templates/k8s.yaml": templatesK8sYaml,
	"templates/main.go": templatesMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{templatesDockerfile, map[string]*bintree{}},
		"Makefile": &bintree{templatesMakefile, map[string]*bintree{}},
		"config.go": &bintree{templatesConfigGo, map[string]*bintree{}},
		"k8s.yaml": &bintree{templatesK8sYaml, map[string]*bintree{}},
		"main.go": &bintree{templatesMainGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

